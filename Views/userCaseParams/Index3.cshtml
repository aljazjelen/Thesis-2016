@{
    ViewData["Title"] = "Index";
}




<div id="container"></div>

<div class="row">
    <div class="col-md-6" style="max-width:580px">
        <div id="custom_canvas" style="max-width:580px"></div>
    </div>
    <div class="col-md-6">
        SMTH
    </div>
</div>

<script src="~/js/inflate.min.js"></script>
<script src="~/js/three.min.js"></script>
<script src="~/js/TrackballControls.js"></script>
<script src="~/js/VTKLoader.js"></script>
<script src="~/js/stats.js"></script>
<script src="~/js/detector.js"></script>
<script src="~/js/Lut.js"></script>



<script>

			if ( ! Detector.webgl ) { Detector.addGetWebGLMessage(); }

			var container, stats;

			var camera, scene, renderer, lut, legendLayout;

			var position;

			var mesh;

			var colorMap;
			var numberOfColors;

    //added by me colors
			var material_color;

			init();
			animate();

			function init() {

				container = document.getElementById( 'container' );

				// SCENE
				scene = new THREE.Scene();

				// CAMERA
				camera = new THREE.PerspectiveCamera( 20, window.innerWidth / window.innerHeight, 1, 10000 );
				camera.name = 'camera';
				scene.add( camera );

				stats = new Stats();
				stats.domElement.style.position = 'absolute';
				stats.domElement.style.bottom = '0px';
				stats.domElement.style.zIndex = 100;
				container.appendChild( stats.domElement );

				// LIGHT
				var ambientLight = new THREE.AmbientLight( 0x444444 );
				ambientLight.name = 'ambientLight';
				scene.add( ambientLight );

				colorMap = 'rainbow';
				numberOfColors = 512;

				legendLayout = 'vertical';


				material_color = loadColors();
				//checkVar();
			    // first obtain colors!
                /*
				function checkVar() {
				    if (typeof material_color == 'undefined') {
				        material_color = loadColors();
				        checkVar();
				    }
				    else {
				    }
				}*/


				//setTimeout(console.log(material_color.length),5000);
				//console.log(material_color.length);
				loadModel(colorMap, numberOfColors, legendLayout);
				//loadModel( colorMap, numberOfColors, legendLayout );

				camera.position.x = 20;
				camera.position.y = 20;
				camera.position.z = 2000;

				var directionalLight = new THREE.DirectionalLight( 0xffffff, 0.7 );
				directionalLight.position.x = 17;
				directionalLight.position.y = 9;
				directionalLight.position.z = 30;
				directionalLight.name = 'directionalLight';
				scene.add( directionalLight );

				renderer = new THREE.WebGLRenderer( { antialias: true } );
				renderer.setClearColor( 0xffffff );
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize(  window.innerWidth,  window.innerHeight );
				container.appendChild( renderer.domElement );

				window.addEventListener( 'resize', onWindowResize, false );

				window.addEventListener( "keydown", onKeyDown, true);

			}

			var rotWorldMatrix;

			function rotateAroundWorldAxis( object, axis, radians ) {

				if ( ! axis ) return;

				rotWorldMatrix = new THREE.Matrix4();
				rotWorldMatrix.makeRotationAxis( axis.normalize(), radians );
				rotWorldMatrix.multiply( object.matrix );

				object.matrix = rotWorldMatrix;
				object.rotation.setFromRotationMatrix( object.matrix );

			}

			function onWindowResize() {

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );
				render();

			}

			function animate() {

				requestAnimationFrame( animate );

				render();
				stats.update();

			}

			function render() {

				rotateAroundWorldAxis(mesh, position, Math.PI / 180);

				renderer.render( scene, camera );

			}

			function loadColors()
			{
			    /*var temp_material_color;
			    var loader = new THREE.BufferGeometryLoader();
			    loader.load("/pressure_init.json", function (color_geometry) {
			        temp_material_color = color_geometry.attributes.pressure.array;
			        console.log(color_geometry.attributes.position.array.length);
			        console.log(color_geometry.attributes.pressure.array.length);
			        console.log(temp_material_color.length);

			    });
			    return temp_material_color;
			    //console.log(material_color.length);*/
			}

			function loadModel ( colorMap, numberOfColors, legendLayout ) {

                /*
			    var loader = new THREE.JSONLoader();

			    loader.load("/out.js", function (old_geometry) {
			        //console.log(material_color.length);


			        //old_geometry.computeVertexNormals();

			        console.log(old_geometry.colorNumbers);
			        console.log(old_geometry.colorValue);
			        console.log(old_geometry.getColor);
			        console.log(old_geometry.VertexColors);

			        var geometry = new THREE.BufferGeometry().fromGeometry(old_geometry);

			        var color_geom = new THREE.Geometry().fromBufferGeometry(geometry);

			        console.log(color_geom.colors.length);
			        console.log(old_geometry.colors.length);
                    //geometry.toJSON.
			        //console.log(geometry.groups.color[0]);
				    //bufferGeo.attributes.position.array();

				    var material = new THREE.MeshLambertMaterial({

				        side: THREE.DoubleSide,
				        color: 0xF5F5F5,
				        vertexColors: THREE.VertexColors

				    });


				    var lutColors = [];

				    lut = new THREE.Lut(colorMap, numberOfColors);

				    lut.setMax(11);
				    lut.setMin(8);


				    for (var i = 0; i < color_geom.colors.length; i++) {


				        //console.log(color_geom.colors);
				        //console.log(geometry.att);
				        //console.log(color_geom.colors[0].colorValue);
				        var colorValue = color_geom.colors[i];
				        color = lut.getColor(colorValue);

				        if (color == undefined) {

				            console.log("ERROR: " + colorValue);

				        } else {

				            lutColors[3 * i] = color.r;
				            lutColors[3 * i + 1] = color.g;
				            lutColors[3 * i + 2] = color.b;

				        }

				    }

				    geometry.addAttribute('color', new THREE.BufferAttribute(new Float32Array(lutColors), 3));

				    mesh = new THREE.Mesh(geometry, material);

				    geometry.computeBoundingBox();
				    var boundingBox = geometry.boundingBox;
				    var center = boundingBox.center();

				    if (position === undefined) {

				        position = new THREE.Vector3(center.x, center.y, center.z);

				    }

				    scene.add(mesh);


				    if (legendLayout) {

				        if (legendLayout == 'horizontal') {

				            legend = lut.setLegendOn({ 'layout': 'horizontal', 'position': { 'x': 0, 'y': 1, 'z': 0 } });

				        }

				        else {

				            legend = lut.setLegendOn();

				        }

				        scene.add(legend);

				        var labels = lut.setLegendLabels({ 'title': 'Pressure', 'um': 'Pa', 'ticks': 5 });

				        scene.add(labels['title']);

				        for (var i = 0; i < Object.keys(labels['ticks']).length; i++) {

				            scene.add(labels['ticks'][i]);
				            scene.add(labels['lines'][i]);

				        }
				    }

				});
                */
                
				var loader = new THREE.BufferGeometryLoader();

				loader.load("testModels/pressure_init.json", function (old_geom) {

				    old_geom.computeVertexNormals();
				    old_geom.normalizeNormals();
                    

					var geometry = new THREE.Geometry().fromBufferGeometry(old_geom);
                    
					console.log("Ss");
					var material = new THREE.MeshLambertMaterial( {

						side: THREE.DoubleSide,
						color: 0xF5F5F5,
						vertexColors: THREE.FaceColors

					} );

					var lutColors = [];

					lut = new THREE.Lut( colorMap, numberOfColors );

					lut.setMax( 11 );
					lut.setMin( 8 );

					for (var i = 0; i < old_geom.attributes.pressure.array.length; i++) {

					    var colorValue = old_geom.attributes.pressure.array[i];

						color = lut.getColor( colorValue );

						if ( color == undefined ) {

							console.log( "ERROR: " + colorValue );

						} else {

							lutColors[ 3 * i     ] = color.r;
							lutColors[ 3 * i + 1 ] = color.g;
							lutColors[3 * i + 2] = color.b;

							face = geometry.faces[i];
							face.color.setRGB(color.r, color.g, color.b);
						}

					}

					//geometry.addAttribute( 'color', new THREE.BufferAttribute( new Float32Array( lutColors ), 3 ) );

					mesh = new THREE.Mesh(geometry, material);

					old_geom.computeBoundingBox();
					var boundingBox = old_geom.boundingBox;
					var center = boundingBox.center();

					if ( position === undefined ) {

						position = new THREE.Vector3(center.x, center.y, center.z);

					}

					scene.add ( mesh );

					if ( legendLayout ) {

						if ( legendLayout == 'horizontal' ) {

							legend = lut.setLegendOn( { 'layout':'horizontal', 'position': { 'x': 21, 'y': 6, 'z': 5 } } );

						}

						else {

							legend = lut.setLegendOn();

						}

						scene.add ( legend );

						var labels = lut.setLegendLabels( { 'title': 'Pressure', 'um': 'Pa', 'ticks': 5 } );

						scene.add ( labels['title'] );

						for ( var i = 0; i < Object.keys( labels[ 'ticks' ] ).length; i++ ) {

							scene.add ( labels[ 'ticks' ][ i ] );
							scene.add ( labels[ 'lines' ][ i ] );

						}

					}

				} );
                
			}

			function cleanScene () {

				var elementsInTheScene = scene.children.length;

				for ( var i = elementsInTheScene-1; i > 0; i-- ) {

					if ( scene.children [ i ].name != 'camera' &&
						 scene.children [ i ].name != 'ambientLight' &&
						 scene.children [ i ].name != 'directionalLight') {

						scene.remove ( scene.children [ i ] );

					}

				}

			}


			function onKeyDown ( e ) {

				var maps = [ 'rainbow', 'cooltowarm', 'blackbody', 'grayscale' ];

				var colorNumbers = ['16', '128', '256', '512' ];

				if ( e.keyCode == 65 ) {

					cleanScene();

					var index = maps.indexOf( colorMap ) >= maps.length - 1 ? 0 : maps.indexOf( colorMap ) + 1;

					colorMap = maps [ index ];

					loadModel ( colorMap, numberOfColors, legendLayout );

				} else if ( e.keyCode == 83 ) {

					cleanScene();

					var index = colorNumbers.indexOf( numberOfColors ) >= colorNumbers.length - 1 ? 0 : colorNumbers.indexOf( numberOfColors ) + 1;

					numberOfColors = colorNumbers [ index ];

					loadModel ( colorMap ,  numberOfColors, legendLayout );

				} else if ( e.keyCode == 68 ) {

					if ( ! legendLayout ) {

						cleanScene();

						legendLayout = 'vertical';

						loadModel ( colorMap ,  numberOfColors, legendLayout );

					} else {

						cleanScene();

						legendLayout = lut.setLegendOff();

						loadModel ( colorMap ,  numberOfColors, legendLayout );

					}

				} else if ( e.keyCode == 70 ) {

					cleanScene();

					if ( ! legendLayout ) return false;

					lut.setLegendOff();

					if ( legendLayout == 'horizontal') {

						legendLayout = 'vertical';

					} else {

						legendLayout = 'horizontal';

					}

					loadModel ( colorMap ,  numberOfColors, legendLayout );

				}

			}

</script>
<!--
<script>

			if ( ! Detector.webgl ) Detector.addGetWebGLMessage();

			var container, stats;

			var camera, controls, scene, renderer;

			var cross;

			init();
			animate();

			function init() {

				camera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 0.01, 1e10 );
				camera.position.z = 0.2;

				controls = new THREE.TrackballControls( camera );

				controls.rotateSpeed = 5.0;
				controls.zoomSpeed = 5;
				controls.panSpeed = 2;

				controls.noZoom = false;
				controls.noPan = false;

				controls.staticMoving = true;
				controls.dynamicDampingFactor = 0.3;

				scene = new THREE.Scene();

				scene.add( camera );

				// light

				var dirLight = new THREE.DirectionalLight( 0xffffff );
				dirLight.position.set( 200, 200, 1000 ).normalize();

				camera.add( dirLight );
				camera.add( dirLight.target );

				var material = new THREE.MeshLambertMaterial( { color: 0xffffff, side: THREE.DoubleSide } );

				var loader = new THREE.VTKLoader();
                // CONVERT VTK FILE TO SOMETHING ALLOWED BY MIME!!
				loader.load("testModels/smallsurface.txt", function (geometry) {

					geometry.center();
					geometry.computeVertexNormals();

					var mesh = new THREE.Mesh( geometry, material );
					mesh.position.set( - 0.075, 0.005, 0 );
					mesh.scale.multiplyScalar( 0.2 );
					scene.add( mesh );

				} );


				// renderer

				renderer = new THREE.WebGLRenderer( { antialias: false } );
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth, window.innerHeight );

				container = document.createElement( 'div' );
				document.body.appendChild( container );
				container.appendChild( renderer.domElement );

				stats = new Stats();
				stats.domElement.style.position = 'absolute';
				stats.domElement.style.top = '0px';
				container.appendChild( stats.domElement );

				//

				window.addEventListener( 'resize', onWindowResize, false );

			}

			function onWindowResize() {

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );

				controls.handleResize();

			}

			function animate() {

				requestAnimationFrame( animate );

				controls.update();
				renderer.render( scene, camera );

				stats.update();

			}

</script>