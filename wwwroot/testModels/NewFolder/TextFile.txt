
<div id="container"></div>

<div class="row">
    <div class="col-md-6" style="max-width:580px">
        <div id="custom_canvas" style="max-width:580px"></div>
    </div>
    <div class="col-md-6">
        SMTH
    </div>
</div>

<script src="~/js/inflate.min.js"></script>
<script src="~/js/three.js"></script>
<script src="~/js/three.min.js"></script>
<script src="~/lib/jquery/dist/jquery.js"></script>
<script src="~/js/VTKLoader.js"></script>
<script src="js/TrackballControls.js"></script>
<script src="~/js/stats.js"></script>
<script src="~/js/detector.js"></script>
<script src="~/js/OrbitControls.js"></script>
<script src="~/js/Lut.js"></script>
<script src="~/js/stats.min.js"></script>



<script>

    if (!Detector.webgl) { Detector.addGetWebGLMessage(); }

    

			var container, stats;

			var camera, scene, renderer, lut, legendLayout;

			var position;

			var mesh;

			var colorMap;
			var numberOfColors;

    //added by me colors
			var material_color;

			init();
			animate();

			function init() {

				container = document.getElementById( 'container' );

				// SCENE
				scene = new THREE.Scene();

				// CAMERA
				camera = new THREE.PerspectiveCamera( 20, window.innerWidth / window.innerHeight, 1, 10000 );
				camera.name = 'camera';
				scene.add( camera );


				controls = new THREE.TrackballControls(camera);

				controls.rotateSpeed = 5.0;
				controls.zoomSpeed = 5;
				controls.panSpeed = 2;

				controls.noZoom = false;
				controls.noPan = false;

				controls.staticMoving = true;
				controls.dynamicDampingFactor = 0.3;




				stats = new Stats();
				stats.domElement.style.position = 'absolute';
				stats.domElement.style.bottom = '0px';
				stats.domElement.style.zIndex = 100;
				container.appendChild( stats.domElement );

				// LIGHT
				var ambientLight = new THREE.AmbientLight( 0x999999 );
				ambientLight.name = 'ambientLight';
				scene.add( ambientLight );

				colorMap = 'rainbow';
				numberOfColors = 512;

				legendLayout = 'vertical';


				material_color = loadColors();
				

				loadModel(colorMap, numberOfColors, legendLayout);



				camera.position.x = 0.3;
				camera.position.y = 0.3;
				camera.position.z = 3;

				var directionalLight1 = new THREE.DirectionalLight( 0xffffff, 0.7 );
				directionalLight1.position.x = 17;
				directionalLight1.position.y = 9;
				directionalLight1.position.z = 30;
				directionalLight1.name = 'directionalLight';
				scene.add( directionalLight1 );

				var directionalLight2 = new THREE.DirectionalLight(0xffffff, 0.7);
				directionalLight2.position.x = -100;
				directionalLight2.position.y = -30;
				directionalLight2.position.z = -5;
				directionalLight2.name = 'directionalLight';
				scene.add(directionalLight2);

				renderer = new THREE.WebGLRenderer({ antialias: true });
                
				renderer.setClearColor( 0xffffff );
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize(  window.innerWidth,  window.innerHeight );
				container.appendChild( renderer.domElement );

				window.addEventListener( 'resize', onWindowResize, false );

				//window.addEventListener( "keydown", onKeyDown, true);

			}

			var rotWorldMatrix;

			function rotateAroundWorldAxis( object, axis, radians ) {

				if ( ! axis ) return;

				rotWorldMatrix = new THREE.Matrix4();
				rotWorldMatrix.makeRotationAxis( axis.normalize(), radians );
				rotWorldMatrix.multiply( object.matrix );

				object.matrix = rotWorldMatrix;
				object.rotation.setFromRotationMatrix( object.matrix );

			}

			function onWindowResize() {

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();
				controls.handleResize();
				renderer.setSize( window.innerWidth, window.innerHeight );
				render();

			}

			function animate() {

				requestAnimationFrame( animate );
				controls.update();
				render();
				stats.update();

			}

			function render() {

				rotateAroundWorldAxis(mesh, position, Math.PI / 180);

				renderer.render( scene, camera );

			}

			function loadColors()
			{
			    /*var temp_material_color;
			    var loader = new THREE.BufferGeometryLoader();
			    loader.load("/pressure_init.json", function (color_geometry) {
			        temp_material_color = color_geometry.attributes.pressure.array;
			        console.log(color_geometry.attributes.position.array.length);
			        console.log(color_geometry.attributes.pressure.array.length);
			        console.log(temp_material_color.length);
			        
			    });
			    return temp_material_color;
			    //console.log(material_color.length);*/
			}

			function loadModel ( colorMap, numberOfColors, legendLayout ) {


			    var loader = new THREE.BufferGeometryLoader();

			    // obtained by converter
                // convertFile_to_JSON
			    loader.load("testModels/velocity.json", function (color_geometry) {
			        temp_material_color = color_geometry.attributes.pressure.array;

			        console.log("pressure array length: ", color_geometry.attributes.pressure.array.length);
			        console.log("color for pressure array length: ",temp_material_color.length);
			        material_color = temp_material_color;

			        console.log("launching loader");

			        console.log("loader launced");


			        var loaderVTK = new THREE.VTKLoader();
			        // VTK sampling file, must rename extension!
			        loaderVTK.load('testModels/p_obstacle.txt', function (obtained_geometry) {
			            //obtained_geometry.computeVertexNormals();
			            obtained_geometry.center();
			            console.log(obtained_geometry);

			            geometry = new THREE.Geometry().fromBufferGeometry(obtained_geometry);
			            geometry.mergeVertices()
			            //geometry.computeVertexNormals();
			            //geometry.mergeVertices()

			            
                        
			            geometry.colorsNeedUpdate = true;
			            console.log(geometry);
			            //var face = geometry.faces[1];
			            //face.color.setHex(Math.random() * 0xffffff);

			            //console.log(geometry.attributes.position.length);

			            //console.log(geometry.toJSON);
			            //newGeometry.faces = geometry.faces;
                        
                    
			            //console.log(newGeometry.faces.length);
                        
			        /*loader.load("/testModels/p_movingwall.json", function (old_geometry) {

			            //console.log(material_color.length);
			        
			        //console.log(old_geometry.position.array.length);
			            //console.log("old geometry", old_geometry.colors.length);

			            console.log(old_geometry);
			        var geometry = new THREE.BufferGeometry().fromGeometry(old_geometry);
			        geometry.removeAttribute('color');
			        //geometry.removeAttribute('colors');
                    */
			            //geometry.attributes.color.array[0] = 1;
			        //console.log(color_geom.colors.length);
			        //console.log(old_geometry.colors.length);

                       /*
			            var material = new THREE.MeshBasicMaterial({

			                side: THREE.DoubleSide,
			                color: 0xfff000,
			                vertexColors: THREE.FaceColors

			            });*/
                        
                        /*
			            new THREE.MeshNormalMaterial({
			                //     overdraw:true
			                // }
			                new THREE.MeshLambertMaterial({
                            */
			            var material = new THREE.MeshLambertMaterial({ color: 0xffffff, side: THREE.DoubleSide, vertexColors: THREE.FaceColors, shading: THREE.SmoothShading });

			            var material_collection = [];
			            var face_color;

				    var lutColors = [];

				    lut = new THREE.Lut(colorMap, numberOfColors);

				    lut.setMax(11000);
				    lut.setMin(1000);

				    console.log("Material color length: ", material_color.length)

				    for (var i = 0; i < material_color.length; i++) {

				        var colorValue = material_color[i];
				        color = lut.getColor(colorValue);

				        if (color == undefined) {

				            console.log("ERROR: " + colorValue);

				        } else {


				            lutColors[3 * i] = color.r;
				            lutColors[3 * i + 1] = color.g;
				            lutColors[3 * i + 2] = color.b;
                            
				            //console.log(color);
				            //var red = co
				            //face_color = new THREE.Color(color.r, color.g, color.b);
				            //console.log(face_color.getHexString());
				            //material_collection[i] = new THREE.MeshBasicMaterial({ color: 0x001100, transparent: true, opacity: 0.8, side: THREE.DoubleSide, vertexColors: THREE.FaceColors })
				            //geometry.faces[i].vertexColors[0] = 0.5; //color.r;
				            //geometry.faces[i].color.setRGB(0.9, 0, 0);
				            //geometry.faces[i].color = new THREE.Color(0xff0000);
				            //geometry.faces[i].vertexColors[1] = 0.5; //color.g;
				            //geometry.faces[i].vertexColors[2] = 0.5;  //color.b;
				            //geometry.faces[i].color.setHex(0x00ff00);
				            face = geometry.faces[i];
				            face.color.setRGB(color.r,color.g,color.b);
                            
				        }

				    }
				    


			            //ssssssssssssssssssssssssssssssssssssss



                        /*
                        var cubeMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff, vertexColors: THREE.FaceColors } );
	
	                                            //var cubeGeometry = new THREE.CubeGeometry( 80, 80, 80, 3, 3, 3 );
	                                            for ( var i = 0; i < geometry.faces.length; i++ ) 
	                                            {
	                                                face = geometry.faces[i];
		                                            face.color.setRGB( Math.random(), Math.random(), Math.random() );		
	                                            }
	                                            cube = new THREE.Mesh(geometry, cubeMaterial);
	                                            cube.position.set(-100, 50, 0);
	                                            scene.add(cube);

                                                */
			            //ssssssssssssssssssssssssssssssssssss



				    //var materials_together = new THREE.MeshFaceMaterial(material_collection);
				    console.log(material);
				    //console.log(materials_together);
				    console.log(geometry);
				    //geometry.addAttribute('color', new THREE.BufferAttribute(new Float32Array(lutColors), 3));

				    //geometry.colors = new Float32Array(lutColors);

				    mesh = new THREE.Mesh(geometry, material);

                   

				    //console.log(geometry.attributes.color.length);

				    geometry.computeBoundingBox();
				    var boundingBox = geometry.boundingBox;
				    var center = boundingBox.center();
                    

				    if (position === undefined) {

				        position = new THREE.Vector3(center.x, center.y, center.z);

				    }


                    


				    scene.add(mesh);
                    

				    if (legendLayout) {

				        if (legendLayout == 'horizontal') {

				            legend = lut.setLegendOn({ 'layout': 'horizontal', 'position': { 'x': 0, 'y': 1, 'z': 0 } });

				        }

				        else {

				            legend = lut.setLegendOn();

				        }
				        
				        scene.add(legend);

				        var labels = lut.setLegendLabels({ 'title': 'Pressure', 'um': 'Pa', 'ticks': 5 });

				        scene.add(labels['title']);

				        for (var i = 0; i < Object.keys(labels['ticks']).length; i++) {

				            scene.add(labels['ticks'][i]);
				            scene.add(labels['lines'][i]);

				        }
				    }
                    
				});

 });
 


			function cleanScene () {

				var elementsInTheScene = scene.children.length;

				for ( var i = elementsInTheScene-1; i > 0; i-- ) {

					if ( scene.children [ i ].name != 'camera' &&
						 scene.children [ i ].name != 'ambientLight' &&
						 scene.children [ i ].name != 'directionalLight') {

						scene.remove ( scene.children [ i ] );

					}

				}

			}


			function onKeyDown(e) {

			    var maps = ['rainbow', 'cooltowarm', 'blackbody', 'grayscale'];

			    var colorNumbers = ['16', '128', '256', '512'];

			    if (e.keyCode == 65) {

			        cleanScene();

			        var index = maps.indexOf(colorMap) >= maps.length - 1 ? 0 : maps.indexOf(colorMap) + 1;

			        colorMap = maps[index];

			        loadModel(colorMap, numberOfColors, legendLayout);

			    } else if (e.keyCode == 83) {

			        cleanScene();

			        var index = colorNumbers.indexOf(numberOfColors) >= colorNumbers.length - 1 ? 0 : colorNumbers.indexOf(numberOfColors) + 1;

			        numberOfColors = colorNumbers[index];

			        loadModel(colorMap, numberOfColors, legendLayout);

			    } else if (e.keyCode == 68) {

			        if (!legendLayout) {

			            cleanScene();

			            legendLayout = 'vertical';

			            loadModel(colorMap, numberOfColors, legendLayout);

			        } else {

			            cleanScene();

			            legendLayout = lut.setLegendOff();

			            loadModel(colorMap, numberOfColors, legendLayout);

			        }

			    } else if (e.keyCode == 70) {

			        cleanScene();

			        if (!legendLayout) return false;

			        lut.setLegendOff();

			        if (legendLayout == 'horizontal') {

			            legendLayout = 'vertical';

			        } else {

			            legendLayout = 'horizontal';

			        }

			        loadModel(colorMap, numberOfColors, legendLayout);

			    }
			}
			}

</script>
